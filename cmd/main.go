package main

import (
	"context"
	"github.com/gorilla/mux"
	"github.com/rs/zerolog/log"
	"net/http"
	"oauth2-pentester/internal"
	apihandler "oauth2-pentester/pkg/handler/api"
	"oauth2-pentester/pkg/logger"
	"os"
	"os/signal"
	"time"
)

func main() {
	r := mux.NewRouter()
	r.HandleFunc("/api/server/analyze", apihandler.ServerAnalyze).
		Methods(http.MethodPost)
	r.HandleFunc("/api/client/analyze", apihandler.ClientAnalyze).
		Methods(http.MethodPost)
	r.NotFoundHandler = internal.NotFoundHandler()

	srv := new(http.Server)
	srv.Addr = ":8000"
	srv.Handler = r

	go func() {
		log.Debug().Msg("Start server on :8000")
		if err := srv.ListenAndServe(); err != nil {
			log.Error().Err(err).Msg(logger.FailListenServer)
		}
	}()

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)

	<-c

	wait := time.Second * 15
	ctx, cancel := context.WithTimeout(context.Background(), wait)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Error().Err(err).Msg(logger.FailStopServer)
	}
	log.Debug().Msg("Stop server")
}
