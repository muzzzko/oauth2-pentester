package selenium

import (
	"fmt"
	"github.com/rs/zerolog/log"
	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
	"net/url"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
	"os"
)

const (
	// These paths will be different on your system.
	seleniumPath     = "/home/egor/my/go/src/github.com/tebeka/selenium/vendor/selenium-server.jar"
	chromeDriverPath = "/home/egor/my/go/src/github.com/tebeka/selenium/vendor/chromedriver"
	port             = 8080
)

func Auth(
	authURL,
	username,
	password,
	clientID,
	redirectURI,
	elementEmailName,
	elementPassName,
	elementEnterID string) derror.Error {

	opts := []selenium.ServiceOption{
		selenium.StartFrameBuffer(),             // Start an X frame buffer for the browser to run in.
		selenium.ChromeDriver(chromeDriverPath), // Specify the path to GeckoDriver in order to use Firefox.
		selenium.Output(os.Stderr),              // Output debug information to STDERR.
	}
	//selenium.SetDebug(true)
	service, err := selenium.NewSeleniumService(seleniumPath, port, opts...)
	if err != nil {
		log.Error().Err(err).Msg(logger.FailStartSelenium)
		return derror.NewSeleniumError()
	}
	defer service.Stop()

	// Connect to the WebDriver instance running locally.
	caps := selenium.Capabilities{"browserName": "chrome"}

	chromeCaps := chrome.Capabilities{
		Path: "",
		Args: []string{
			"--headless", // <<<
			"--no-sandbox",
			"--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7",
		},
	}
	caps.AddChrome(chromeCaps)
	wd, err := selenium.NewRemote(caps, fmt.Sprintf("http://localhost:%d/wd/hub", port))
	if err != nil {
		log.Error().Err(err).Msg(logger.FailStartChromeSession)
		return derror.NewSeleniumError()
	}
	defer wd.Quit()

	// Navigate to the simple playground interface.
	URL, _ := url.Parse(authURL)
	q := URL.Query()
	q.Set("client_id", clientID)
	q.Set("redirect_uri", redirectURI)
	q.Set("response_type", "code")
	URL.RawQuery = q.Encode()

	if err := wd.Get(URL.String()); err != nil {
		log.Error().Err(err).Msg(logger.FailOpenAuthPage)
		return derror.NewSeleniumError()
	}

	var elem selenium.WebElement
	{
		elem, err = wd.FindElement(selenium.ByName, elementEmailName)
		if err != nil {
			log.Error().Err(err).Str(logger.ElementField, elementEmailName).Msg(logger.FailGetElement)
			return derror.NewSeleniumError()
		}
		err = elem.SendKeys(username)
		if err != nil {
			log.Error().Err(err).Str(logger.ElementField, elementEmailName).Msg(logger.FailSetElementValue)
			return derror.NewSeleniumError()
		}
	}

	{
		// Get a reference to the text box containing code.
		elem, err = wd.FindElement(selenium.ByName, elementPassName)
		if err != nil {
			log.Error().Err(err).Str(logger.ElementField, elementPassName).Msg(logger.FailGetElement)
			return derror.NewSeleniumError()
		}

		err = elem.SendKeys(password)
		if err != nil {
			log.Error().Err(err).Str(logger.ElementField, elementPassName).Msg(logger.FailSetElementValue)
			return derror.NewSeleniumError()
		}
	}

	{
		elem, err = wd.FindElement(selenium.ByID, elementEnterID)
		if err != nil {
			log.Error().Err(err).Str(logger.ElementField, elementEnterID).Msg(logger.FailGetElement)
			return derror.NewSeleniumError()
		}

		err = elem.Click()
		if err != nil {
			log.Error().Err(err).Str(logger.ElementField, elementEnterID).Msg(logger.FailClickElement)
			return derror.NewSeleniumError()
		}
	}

	return nil
}
