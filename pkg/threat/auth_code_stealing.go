package threat

import (
	"github.com/rs/zerolog/log"
	"net/http"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
)

type AuthCodeStealing struct {
	baseThreat

	clientID            string
	clientSecret        string

	client *http.Client
}

func NewAuthCodeStealing(
	authURL,
	username,
	password,
	tokenURL,
	clientID,
	clientSecret,
	elementEmailName,
	elementPassName,
	elementEnterID string,
	client *http.Client) *AuthCodeStealing {

	threat := new(AuthCodeStealing)
	threat.authURL = authURL
	threat.username = username
	threat.password = password
	threat.tokenURL = tokenURL
	threat.clientID = clientID
	threat.clientSecret = clientSecret
	threat.elementEmailName = elementEmailName
	threat.elementPassName = elementPassName
	threat.elementEnterID = elementEnterID
	threat.client = client

	return threat
}

func (t *AuthCodeStealing) Analyze() (bool, derror.Error) {
	vcreds, err := t.auth(t.clientID, t.clientSecret, "")
	if err != nil {
		 return false, err
	}

	if vcreds.AccessToken == "" {
		log.Error().Msg(logger.FailGetTokenPair)
		return false, nil
	}

	accessToken, _, err := requestTokenPair(codeParam,
		vcreds.Code,
		codeGrantType,
		t.tokenURL,
		t.clientID,
		t.clientSecret,
		"",
		redirectURI,
	)
	if err != nil {
		return false, err
	}
	if accessToken == "" {
		return true, nil
	}

	return false, nil
}

func (t *AuthCodeStealing) String() string {
	return "Возможнсть повторного ипользования кода авторизациии"
}