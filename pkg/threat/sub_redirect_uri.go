package threat

import (
	"github.com/rs/zerolog/log"
	"net/http"
	"net/url"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
)

type SubRedirectURI struct {
	authURL string
	clientID string
	client  *http.Client
}

func NewSubRedirectURI(authURL, clientID string, client *http.Client) *SubRedirectURI {
	threat := new(SubRedirectURI)
	threat.authURL = authURL
	threat.clientID = clientID
	threat.client = client

	return threat
}

func (t *SubRedirectURI) Analyze() (bool, derror.Error) {
	URL, _ := url.Parse(t.authURL)
	q := URL.Query()
	q.Set("client_id", t.clientID)
	q.Set("redirect_uri", "http://evil.com/callback")
	q.Set("response_type", "code")
	URL.RawQuery = q.Encode()

	r, err := http.NewRequest(http.MethodGet, URL.String(), http.NoBody)
	if err != nil {
		log.Error().Err(err).Msg(logger.FailCreateRequest)
		return false, derror.NewAnalyze()
	}
	resp, err := t.client.Do(r)
	if resp != nil {
		resp.Body.Close()
	}
	if err != nil {
		log.Error().Err(err).Msg(logger.FailDoRequest)
		return false, derror.NewAnalyze()
	}

	log.Info().Int(logger.StatusCodeField, resp.StatusCode).Msg(logger.SubstituteRedirectURI)
	if resp.StatusCode == http.StatusOK {
		return false, nil
	}


	return true, nil
}

func (t *SubRedirectURI) String() string {
	return "Замена адреса перенаправления на адрес, контролируемый наршителем"
}

