package threat

import (
	"net/http"
	"oauth2-pentester/pkg/derror"
)

const (
	minSecretLength = 16
)

type Guessing struct {
	baseThreat

	clientID            string
	clientSecret        string

	client *http.Client
}

func NewGuessing(
	authURL,
	username,
	password,
	tokenURL,
	clientID,
	clientSecret,
	elementEmailName,
	elementPassName,
	elementEnterID string,
	client *http.Client) *Guessing {

	threat := new(Guessing)
	threat.authURL = authURL
	threat.username = username
	threat.password = password
	threat.tokenURL = tokenURL
	threat.clientID = clientID
	threat.clientSecret = clientSecret
	threat.elementEmailName = elementEmailName
	threat.elementPassName = elementPassName
	threat.elementEnterID = elementEnterID
	threat.client = client

	return threat
}

func (t *Guessing) Analyze() (bool, derror.Error) {
	vcreds, err := t.auth(t.clientID, t.clientSecret, "")
	if err != nil {
		return false, err
	}

	if len(vcreds.AccessToken) < minSecretLength ||
		len(vcreds.RefreshToken) <= minSecretLength && vcreds.RefreshToken != "" ||
		len(vcreds.Code) <= minSecretLength  {
		return false, nil
	}

	return true, nil
}

func (t *Guessing) String() string {
	return "Возможность подобрать секретное значение"
}