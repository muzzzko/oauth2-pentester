package threat

import (
	"net/http"
	"oauth2-pentester/pkg/threat"
	"time"
)

const (
	defaultTimeout     = 5
	callbackPath       = "/callback"
	callbackServerAddr = ":8001"
	redirectURI        = "http://localhost:8001/callback"

	codeParam     = "code"
	codeGrantType = "authorization_code"
	refreshTokenGrantType = "refresh_token"
)

func GetThreats(
	authURL,
	username,
	password,
	tokenURL,
	clientID,
	clientSecret,
	scope,
	malwareClientID,
	malwareClientSecret,
	elementEmailName,
	elementPassName,
	elementEnterID string) []threat.IThreat {

	client := new(http.Client)
	client.Timeout = time.Second * defaultTimeout
	client.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		return http.ErrUseLastResponse
	}

	threats := make([]threat.IThreat, 0)
	threats = append(threats, NewNoTLS(tokenURL, client))
	threats = append(threats, NewSubRefreshToken(
		authURL,
		username,
		password,
		tokenURL,
		clientID,
		malwareClientID,
		malwareClientSecret,
		elementEmailName,
		elementPassName,
		elementEnterID,
		client))
	threats = append(threats, NewAuthCodeStealing(
		authURL,
		username,
		password,
		tokenURL,
		clientID,
		clientSecret,
		elementEmailName,
		elementPassName,
		elementEnterID,
		client))
	threats = append(threats, NewGuessing(
		authURL,
		username,
		password,
		tokenURL,
		clientID,
		clientSecret,
		elementEmailName,
		elementPassName,
		elementEnterID,
		client))
	threats = append(threats, NewPhishing(tokenURL, client))
	threats = append(threats, NewClickJacking(authURL, clientID, client))
	threats = append(threats, NewResponse307(
		authURL,
		username,
		password,
		clientID,
		elementEmailName,
		elementPassName,
		elementEnterID,
		client))
	threats = append(threats, NewSubRedirectURI(authURL, clientID, client))
	threats = append(threats, NewincreaseScope(
		authURL,
		username,
		password,
		tokenURL,
		clientID,
		clientSecret,
		scope,
		elementEmailName,
		elementPassName,
		elementEnterID,
		client))

	return threats
}

