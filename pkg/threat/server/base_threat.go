package threat

import (
	"context"
	"github.com/rs/zerolog/log"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
	"oauth2-pentester/pkg/selenium"
)

type baseThreat struct {
	authURL             string
	username            string
	password            string
	tokenURL            string
	elementEmailName    string
	elementPassName     string
	elementEnterID      string
}

func (t *baseThreat) auth(clientID, clientSecret, scope string) (*creds, derror.Error) {
	out := make(chan interface{}, 1)
	ctx, cancel := context.WithCancel(context.Background())
	go func() {
		getCreds(ctx, t.tokenURL, clientID, clientSecret, scope, out)
	}()

	if err := selenium.Auth(t.authURL,
		t.username,
		t.password,
		clientID,
		redirectURI,
		t.elementEmailName,
		t.elementPassName,
		t.elementEnterID); err != nil {
		return nil, err
	}

	res := <-out
	cancel()

	if err, ok := res.(derror.Error); ok {
		return nil, err
	}

	var vcreds *creds
	var ok bool
	if vcreds, ok = res.(*creds); !ok {
		log.Error().Interface(logger.AccessTokenField, res).Msg(logger.FailConvertAccessToken)
		return nil, derror.NewAnalyze()
	}

	return vcreds, nil
}
