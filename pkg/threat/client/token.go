package threat

import (
	"context"
	"encoding/json"
	"github.com/rs/zerolog/log"
	"net/http"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
	"sync"
)

func handleTokenRequest(ctx context.Context, wg *sync.WaitGroup, out chan <- interface{}) {
	go func() {
		r := http.NewServeMux()
		r.HandleFunc(tokenPath, func(w http.ResponseWriter, r *http.Request) {
			creds := struct{
				AccessToken string `json:"access_token"`
				RefreshToken string `json:"refresh_token"`
				ExpiresIn int `json:"expires_in"`
			}{
				AccessToken: "access_token",
				RefreshToken: "refresh_token",
				ExpiresIn: 3600,
			}

			body, err := json.Marshal(&creds)
			if err != nil {
				log.Error().Err(err).Msg(logger.FailEncodeJSON)
				out <- derror.NewAnalyze()
			}

			w.Write(body)
			out <- true
		})

		srv := new(http.Server)
		srv.Addr = authServerAddr
		srv.Handler = r

		go func() {
			if err := srv.ListenAndServe(); err != nil &&  err != http.ErrServerClosed {
				log.Error().Err(err).Msg(logger.FailStopServer)
				return
			}
		}()

		<- ctx.Done()
		srv.Shutdown(ctx)
		wg.Done()
	}()
}
