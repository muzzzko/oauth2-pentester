package threat

import (
	"github.com/rs/zerolog/log"
	"net/http"
	"net/url"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
)

type baseThreat struct {
	authURL string

	client *http.Client
}

func (t *baseThreat) getAuthURL() (*url.URL, derror.Error) {
	resp, derr := t.makeGetRequest(t.authURL)
	if resp != nil {
		resp.Body.Close()
	}
	if derr != nil {
		return nil, derr
	}

	authURL, err := url.Parse(resp.Header.Get(locationHeader))
	if err != nil {
		log.Error().Err(err).Msg(logger.FailGetHeader)
		return nil, derror.NewAnalyze()
	}

	return authURL, nil
}

func (t *baseThreat) makeGetRequest(url string) (*http.Response, derror.Error) {
	r, err := http.NewRequest(http.MethodGet, url, http.NoBody)
	if err != nil {
		log.Error().Err(err).Msg(logger.FailCreateRequest)
		return nil, derror.NewAnalyze()
	}
	resp, err := t.client.Do(r)
	if err != nil {
		log.Error().Err(err).Msg(logger.FailDoRequest)
		return nil, derror.NewAnalyze()
	}

	return resp, nil
}