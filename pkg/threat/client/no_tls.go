package threat

import (
	"github.com/rs/zerolog/log"
	"net/http"
	"oauth2-pentester/pkg/derror"
	"oauth2-pentester/pkg/logger"
	"strings"
)

type NoTLS struct {
	callbackURL string

	client *http.Client
}

func NewNoTLS(callbackURL string, client *http.Client) *NoTLS {
	threat := new(NoTLS)
	threat.callbackURL = callbackURL
	threat.client = client

	return threat
}

func (t *NoTLS) Analyze() (bool, derror.Error) {
	getTokenURL := strings.Replace(t.callbackURL, "https", "http", -1)

	r, err := http.NewRequest("POST", getTokenURL, http.NoBody)
	if err != nil {
		log.Error().Err(err).Msg(logger.FailCreateRequest)
		return false, derror.NewAnalyze()
	}

	resp, err := t.client.Do(r)
	if resp != nil {
		defer resp.Body.Close()
	}
	if err != nil {
		log.Error().Err(err).Msg(logger.FailDoRequest)
		return false, derror.NewAnalyze()
	}
	if resp.StatusCode != http.StatusMovedPermanently {
		log.Warn().Int(logger.StatusCodeField, resp.StatusCode).Msg(logger.FailAnalyze)
		return false, nil
	}

	return true, nil
}

func (t *NoTLS) String() string {
	return "Код авторизации может передавться по незащищенному соединению"
}